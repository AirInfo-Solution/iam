buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
    }
}

plugins {
    id 'net.saliman.cobertura' version '2.2.8'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'findbugs'
    apply plugin: 'cobertura'

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:2.0.2.RELEASE'
        }
    }

    repositories {
        mavenCentral()
    }

    ext {
        generatedSourcesDir = new File("${projectDir}/src/generated")
        generatedSourcesJavaDir = new File(generatedSourcesDir, "/java")
    }

    sourceSets {
        main {
            java {
                srcDir generatedSourcesJavaDir
            }
        }
    }

    findbugs {
        excludeFilter = new File(project.parent.projectDir, "codequality/findbugs/excludeFilter.xml")
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
        vcs = 'Git'
    }
}

// configuring cobertura to merge results of subprojects

def childTestTasks = []
def coverageDatafiles = []
def testSourceDirs = []
subprojects.each {
    coverageDatafiles << it.file("build/cobertura/cobertura.ser")
    childTestTasks << "${it.name}:test"
    testSourceDirs << it.file("src/main/java").path
}

cobertura {
    coverageMergeDatafiles = coverageDatafiles
    coverageSourceDirs  = testSourceDirs
}

// make sure this test task is run last
test.dependsOn(childTestTasks)